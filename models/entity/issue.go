package entity

import "net/url"

type Issue struct {
	URL       string
	Kind      string
	Parameter string
	Getparam  url.Values
	Postparam url.Values
	Request   string
	Response  string
}

type Vuln struct {
	CWE         string  `json:"CWE"`
	Severity    string  `json:"Severity"`
	Description string  `json:"Description"`
	Solution    string  `json:"Solution"`
	Issues      []Issue `json:"Issues"`
}

var csrfVuln = Vuln{
	CWE:      "CWE-352",
	Severity: "High",
	Description: "攻撃者が悪意のあるコンテンツをHTTPリクエストに書き込み、サーバからのレスポンスにスクリプトを仕込みます。\n" +
		"これを利用し、攻撃者が作成したリクエストを他のユーザに実行させ悪意のあるスクリプトを実行させます。\n" +
		"攻撃者は、悪意のあるパラメータを含んだURLを掲示板に公開したり、被害者に向けてメッセージを送り攻撃を誘導します。\n",
	Solution: "「必須対策」\n" +
		"- 要素内容/属性値の文字をエスケープして、属性値はダブルクォーテーションでくくりましょう。\n" +
		"(例. `<` を `&lt;` にする等、HTML特殊文字はHTMLエンティティに置き換えましょう。)\n" +
		"- 文字列は想定しているエンコーディングですか？HTTPレスポンスの文字エンコーディング指定をしましょう。Webアプリケーションとブラウザとの文字エンコーディングの差異でXSSの原因になりえます。\n" +
		"「保険的対策」\n" +
		"- X-XSS-Protectionレスポンスヘッダの使用はしていますか？ブラウザ機能により反射型XSSを無害な出力に変更してくれます。利用者が無効にできてしまいますが、これを利用することにより上書きすることができます。\n" +
		"- CSP(Contents Security Policy)の設定をしていますか？これを設定することにより、evalの禁止, インラインスクリプトを禁止にする等、より強い制約を設けることができます。\n" +
		"- 入力値の検証は行っていますか？この対策は限定的ですが、郵便番号など特定の文字の種類しか入力を求めていない箇所に、要求を満たしていない入力がされた場合にエラーを表示し、再入力を求めるようにします。\n" +
		"これにより、スクリプトを入力できないようにすることができます。\n" +
		"また、文字の種類以外にも長さを制限することで防げる可能性があります。\n" +
		"- 上記の検証をサーバ側で行っていますか？クライアント上で入力値の検証を行ったとしても、proxyツールなどの使用により攻撃者は要求を満たしていない値の送信が可能です。これを防ぐために、サーバ側で適切な検証を行いましょう。\n" +
		"- CookieにHTTPOnly属性を付与していますか？これにより、Cookieに保存されているセッションIDへのアクセスを防ぐことができます。\n",
	Issues: []Issue{},
}

var reflectedxssVuln = Vuln{
	CWE:      "CWE-79",
	Severity: "High",
	Description: "攻撃者が悪意のあるコンテンツを書き込み、保存されます。以降Webアプリケーションにアクセスするたびにスクリプトが実行されてしまいます。\n" +
		"攻撃者が書き込んだ悪意のあるスクリプトが保存されるため、格納型(stored)と呼ばれます。\n" +
		"これを利用し、悪意のあるスクリプトが保存されたWebアプリケーションにアクセスしたユーザにスクリプトを実行します。\n",
	Solution: "「必須対策」\n" +
		"- 要素内容/属性値の文字をエスケープして、属性値はダブルクォーテーションでくくりましょう。\n" +
		"(例. `<` を `&lt;` にする等、HTML特殊文字はHTMLエンティティに置き換えましょう。)\n" +
		"- 文字列は想定しているエンコーディングですか？HTTPレスポンスの文字エンコーディング指定をしましょう。Webアプリケーションとブラウザとの文字エンコーディングの差異でXSSの原因になりえます。\n" +
		"「保険的対策」\n" +
		"- CSP(Contents Security Policy)の設定をしていますか？これを設定することにより、evalの禁止, インラインスクリプトを禁止にする等、より強い制約を設けることができます。\n" +
		"- 入力値の検証は行っていますか？この対策は限定的ですが、郵便番号など特定の文字の種類しか入力を求めていない箇所に、要求を満たしていない入力がされた場合にエラーを表示し、再入力を求めるようにします。\n" +
		"これにより、スクリプトを入力できないようにすることができます。\n" +
		"また、文字の種類以外にも長さを制限することで防げる可能性があります。\n" +
		"- 上記の検証をサーバ側で行っていますか？クライアント上で入力値の検証を行ったとしても、proxyツールなどの使用により攻撃者は要求を満たしていない値の送信が可能です。これを防ぐために、サーバ側で適切な検証を行いましょう。\n" +
		"- CookieにHTTPOnly属性を付与していますか？これにより、Cookieに保存されているセッションIDへのアクセスを防ぐことができます。",
	Issues: []Issue{},
}

var storedxssVuln = Vuln{
	CWE:      "CWE-79",
	Severity: "High",
	Description: "攻撃者が悪意のあるコンテンツを書き込み、保存されます。以降Webアプリケーションにアクセスするたびにスクリプトが実行されてしまいます。\n" +
		"攻撃者が書き込んだ悪意のあるスクリプトが保存されるため、格納型(stored)と呼ばれます。\n" +
		"これを利用し、悪意のあるスクリプトが保存されたWebアプリケーションにアクセスしたユーザにスクリプトを実行します。",
	Solution: "「必須対策」\n" +
		"- 要素内容/属性値の文字をエスケープして、属性値はダブルクォーテーションでくくりましょう。\n" +
		"(例. `<` を `&lt;` にする等、HTML特殊文字はHTMLエンティティに置き換えましょう。)\n" +
		"-  文字列は想定しているエンコーディングですか？HTTPレスポンスの文字エンコーディング指定をしましょう。Webアプリケーションとブラウザとの文字エンコーディングの差異でXSSの原因になりえます。n" +
		"「保険的対策」\n" +
		"- CSP(Contents Security Policy)の設定をしていますか？これを設定することにより、evalの禁止, インラインスクリプトを禁止にする等、より強い制約を設けることができます。\n" +
		"- 入力値の検証は行っていますか？この対策は限定的ですが、郵便番号など特定の文字の種類しか入力を求めていない箇所に、要求を満たしていない入力がされた場合にエラーを表示し、再入力を求めるようにします。\n" +
		"これにより、スクリプトを入力できないようにすることができます。\n" +
		"また、文字の種類以外にも長さを制限することで防げる可能性があります。\n" +
		"- 上記の検証をサーバ側で行っていますか？クライアント上で入力値の検証を行ったとしても、proxyツールなどの使用により攻撃者は要求を満たしていない値の送信が可能です。これを防ぐために、サーバ側で適切な検証を行いましょう。\n" +
		"- CookieにHTTPOnly属性を付与していますか？これにより、Cookieに保存されているセッションIDへのアクセスを防ぐことができます。\n",
	Issues: []Issue{},
}

var osciVuln = Vuln{
	CWE:      "CWE-78",
	Severity: "High",
	Description: "シェルを呼び出す機能を適切に使えていないと発生する脆弱性。\n" +
		"攻撃者が利用することで情報漏洩、任意のコマンド実行し不正なシステム操作、他システムへの攻撃の踏み台などが発生する可能性があります。\n",
	Solution: "「必須対策」\n" +
		"-シェルを呼び出し機能のある関数の利用を避けましょう。\n" +
		"-シェルを呼び出し機能のある関数に外部からのパラメータを渡さないようにしましょう。\n" +
		"「保険的対策」\n" +
		"-シェルを呼び出し機能のある関数を利用時、その引数を構成する変数を調べ、許可した処理のみ実行するようにしましょう。\n",
	Issues: []Issue{},
}

var dirtraversalVuln = Vuln{
	CWE:      "CWE-22",
	Severity: "High",
	Description: "ファイル名の指定の実装に問題があるので、攻撃者によって制限されたディレクトリ外の任意のファイルを指定され、開発者の意図しない処理が行われる可能性があります。\n" +
		"Webアプリケーションの実装によっては、Webサーバ内にあるファイルの情報漏洩だけでなく、内容の改ざん・削除をされる可能性もあります。\n",
	Solution: "「必須対策」\n" +
		"- Webサーバ内のファイル名を外部からのパラメータで指定する実装は避けてください。\n" +
		"- ファイルを開く実装部分は、固定のディレクトリを指定して、かつファイル名にディレクトリが含まれないようにしましょう。\n" +
		"「保険的対策」\n" +
		"- Webサーバ内のファイルへのアクセス権限の設定は正しく管理するようにしましょう。Webサーバ側でアクセスを拒否することができます。\n" +
		"- ファイル名の文字種を英数字に限定しておけば、Path Traversal攻撃時に利用される記号文字が使用できなくなります。\n",
	Issues: []Issue{},
}

var timebasedsqliVuln = Vuln{
	CWE:      "CWE-89",
	Severity: "High",
	Description: "データベースと連携したアプリケーションでSQLの呼び出し方に不備があると発生する脆弱性です。\n" +
		"攻撃者が利用することで情報漏洩、データベースの改ざん、不正ログイン、OSコマンドの実行、ファイルの参照・更新などが発生する可能性があります。\n",
	Solution: "「必須対策」\n" +
		"- SQL文の組み立てをプレースホルダで実装するようにしましょう。\n" +
		"- Webアプリケーションに渡されるパラメータでSQL文を直接指定しないようにしましょう。\n" +
		"- エスケープ処理を適切に行いましょう。\n" +
		"↳文字列リテラル内で特別な意味を持つ記号文字を「'」→「\\'」、「\\」→「\\\\」などに置き換える処理。\n" +
		"「保険的対策」\n" +
		"- エラーメッセージがそのままブラウザに表示されていませんか？\n" +
		"- データベースアカウントに適切な権限を与えていますか？\n",
	Issues: []Issue{},
}

var errbasedsqliVuln = Vuln{
	CWE:      "CWE-89",
	Severity: "High",
	Description: "データベースと連携したアプリケーションでSQLの呼び出し方に不備があると発生する脆弱性です。\n" +
		"攻撃者が利用することで情報漏洩、データベースの改ざん、不正ログイン、OSコマンドの実行、ファイルの参照・更新などが発生する可能性があります。\n",
	Solution: "「必須対策」\n" +
		"- SQL文の組み立てをプレースホルダで実装するようにしましょう。\n" +
		"- Webアプリケーションに渡されるパラメータでSQL文を直接指定しないようにしましょう。\n" +
		"- エスケープ処理を適切に行いましょう。\n" +
		"↳文字列リテラル内で特別な意味を持つ記号文字を「'」→「\\'」、「\\」→「\\\\」などに置き換える処理。\n" +
		"「保険的対策」\n" +
		"- エラーメッセージがそのままブラウザに表示されていませんか？\n" +
		"- データベースアカウントに適切な権限を与えていますか？\n",
	Issues: []Issue{},
}

var openredirectVuln = Vuln{
	CWE:      "CWE-601",
	Severity: "Medium",
	Description: "攻撃者が任意の外部ドメインにリダイレクトさせるURLを作成することができます。\n" +
		"これを利用し攻撃者は、被害者に悪意のあるサイトに誘導することが可能になり、フィッシング攻撃が可能になります。\n" +
		"この攻撃は、正しいURLを使用している上にSSL証明書のエラーも出ないため被害者が気づきにくくなっています。この状態でログインID、パスワードなど個人情報を求められた場合に被害者は入力してしまう可能性があります。\n",
	Solution: "「必須対策」\n" +
		"- リダイレクト先は固定するようにしましょう。\n" +
		"- 許可されたドメインのみリダイレクトをできるように制限しましょう。\n",
	Issues: []Issue{},
}

var dirlistingVuln = Vuln{
	CWE:      "CWE-548",
	Severity: "Low",
	Description: "特定のWebサイトディレクトリにインデックスファイルがない場合にディレクトリの内容を表示するWebサーバーの機能がオンになっています。\n" +
		"この機能がオンになっていることによって、攻撃者が攻撃を仕掛けるのに十分な情報を与えてしまう可能性があります。\n",
	Solution: "「必須対策」\n" +
		"- 公開ディレクトリに非公開ファイルを配置しないでください。情報漏洩となります。\n" +
		"「保険的対策」\n" +
		"- ディレクトリリスト機能をオフにしてください。\n",
	Issues: []Issue{},
}

var httpheaderiVuln = Vuln{
	CWE:      "CWE-113",
	Severity: "Medium",
	Description: "HTTPレスポンスヘッダの出力処理に問題がある場合に発生する脆弱性です。\n" +
		"攻撃者が利用することで成りすまし、表示内容の改変、キャッシュ汚染、任意のJavaScriptの実行などが発生する可能性があります。\n",
	Solution: "「必須対策」\n" +
		"- ヘッダ出力用のAPIを使用するようにしましょう。\n" +
		"- 改行を許可しないような処理を行うようにしましょう。\n" +
		"- 外部からのパラメータをHTTPレスポンスヘッダとして出力しないようにしましょう。\n" +
		"「保険的対策」\n" +
		"- 外部からの入力の改行コードはすべて削除するようにしましょう。\n" +
		"↳ 改行コードを含む文字列を受け付ける必要がある場合はWebアプリケーションが正しく動作しなくなる場合があります。\n",
	Issues: []Issue{},
}

var Vulnmap = map[string]*Vuln{
	"Cross_Site_Request_Forgery": &csrfVuln,
	"Reflected_XSS":              &reflectedxssVuln,
	"Stored_XSS":                 &storedxssVuln,
	"OS_Command_Injection":       &osciVuln,
	"Directory_Traversal":        &dirtraversalVuln,
	"Time_based_SQL_Injection":   &timebasedsqliVuln,
	"Error_Based_SQL_Injection":  &errbasedsqliVuln,
	"Open_Redirect":              &openredirectVuln,
	"Directory_Listing":          &dirlistingVuln,
	"HTTP_Header_Injection":      &httpheaderiVuln,
}

var WholeIssue []Issue
